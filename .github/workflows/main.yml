name: "Github Actions Activity"

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform Action to Perform'
        type: choice
        options:
          - Terraform_apply
          - Terraform_destroy

env:
  TF_IN_AUTOMATION: true
  TF_INPUT: 0
  TF_CLI_ARGS: -no-color
  AWS_REGION: ${{ vars.AWS_REGION }}
  TF_STATE_BUCKET: ${{ vars.TF_STATE_BUCKET }}
  TF_STATE_KEY: ${{ vars.TF_STATE_KEY }}
  TF_STATE_TABLE: ${{ vars.TF_STATE_TABLE }}

jobs:
  terraform_apply:
    if: ${{ github.event.inputs.action == 'Terraform_apply' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v2.0.2
        with:
          terraform_version: 1.1.9
          terraform_wrapper: false

      - name: Terraform Init (remote state)
        run: |
          terraform init \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="key=${TF_STATE_KEY}" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_STATE_TABLE}" \
            -backend-config="encrypt=true"

      - name: Ensure SG imported if it already exists
        shell: bash
        run: |
          set -euo pipefail
          VPC_ID="${{ vars.VPC_ID || '' }}"
          if [ -z "$VPC_ID" ] || [ "$VPC_ID" = "null" ]; then
            VPC_ID=$(aws ec2 describe-vpcs --filters Name=isDefault,Values=true \
              --query 'Vpcs[0].VpcId' --output text --region "${AWS_REGION}" || true)
          fi
          SG_ID=$(aws ec2 describe-security-groups \
            --filters Name=group-name,Values=tf-wp-sg Name=vpc-id,Values="$VPC_ID" \
            --query 'SecurityGroups[0].GroupId' --output text --region "${AWS_REGION}" || true)

          if [ -n "$SG_ID" ] && [ "$SG_ID" != "None" ]; then
            echo "Importing existing SG $SG_ID into state if not present..."
            terraform state show aws_security_group.web >/dev/null 2>&1 || \
              terraform import aws_security_group.web "$SG_ID" || true
          else
            echo "No existing SG named tf-wp-sg found; Terraform will create it."
          fi

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve

  terraform_destroy:
    if: ${{ github.event.inputs.action == 'Terraform_destroy' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v2.0.2
        with:
          terraform_version: 1.1.9
          terraform_wrapper: false

      - name: Terraform Init (reconfigure remote state)
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="key=${TF_STATE_KEY}" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_STATE_TABLE}" \
            -backend-config="encrypt=true"

      - name: Ensure SG imported if it already exists
        shell: bash
        run: |
          set -euo pipefail
          VPC_ID="${{ vars.VPC_ID || '' }}"
          if [ -z "$VPC_ID" ] || [ "$VPC_ID" = "null" ]; then
            VPC_ID=$(aws ec2 describe-vpcs --filters Name=isDefault,Values=true \
              --query 'Vpcs[0].VpcId' --output text --region "${AWS_REGION}" || true)
          fi
          SG_ID=$(aws ec2 describe-security-groups \
            --filters Name=group-name,Values=tf-wp-sg Name=vpc-id,Values="$VPC_ID" \
            --query 'SecurityGroups[0].GroupId' --output text --region "${AWS_REGION}" || true)

          if [ -n "$SG_ID" ] && [ "$SG_ID" != "None" ]; then
            terraform state show aws_security_group.web >/dev/null 2>&1 || \
              terraform import aws_security_group.web "$SG_ID" || true
          fi

      - name: Terraform Plan -destroy
        run: terraform plan -destroy

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
